# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jwSwhi8Pou-8WaKIIjyscTRsf-eYtcSw

## PYTRENDS
"""

#!pip install pytrends

import pandas as pd
import numpy as np
from datetime import date, timedelta
from functools import partial
from time import sleep
from calendar import monthrange

from pytrends.exceptions import ResponseError
from pytrends.request import TrendReq

import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.externals import joblib
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,Dropout,LSTM
import ta
from tensortrade.data import DataFeed, Module
from sklearn import metrics
import math


import A2_Functions as A2

def preprocess(files):
    for file in files:
        df_test= pd.read_csv(file)

        #df_test= pd.read_csv('/content/data/BTC-USD-test.csv')
        test = ta.add_all_ta_features(df_test, 'open', 'high', 'low', 'close', 'volume', fillna=True)
        test.drop(columns=['date', 'open', 'high', 'low', 'close', 'volume'], inplace=True)

        X1_test, X2_test, y_pred = A2.preprocess(["test.csv"])
        y1_hat_test = A2.model('A2_LSTM_Model.h5', X1_test)
        y2_hat_test = A2.combiner(y1_hat_test, X2_test, 'A2_combiner_LSTM.h5', 'scaler.save')
        y2_hat_2_test = [i[0] for i in y2_hat_test.tolist()]
        test = test[20:]
        test['close_prediction'] = y2_hat_2_test
        test.reset_index(inplace=True, drop=True)

        return test


def trading(agent_path, n_step = len(test),):

    from tensortrade.exchanges import Exchange
    from tensortrade.exchanges.services.execution.simulated import execute_order
    from tensortrade.data import Stream, DataFeed, Module
    from tensortrade.instruments import USD, BTC
    from tensortrade.wallets import Wallet, Portfolio

    coinbase = Exchange("coinbase", service=execute_order)(
        Stream("USD-BTC", price_history['close'].tolist())
    )


    portfolio = Portfolio(USD, [
        Wallet(coinbase, 10000 * USD),
        Wallet(coinbase, 10 * BTC),
    ])

    with Module("coinbase") as coinbase_ns:
        nodes = [Stream(name, test[name].tolist()) for name in test.columns]

    feed = DataFeed([coinbase_ns])


    from tensortrade.environments import TradingEnvironment

    env = TradingEnvironment(
        feed=feed,
        portfolio=portfolio,
        action_scheme='managed-risk',
        reward_scheme='risk-adjusted',
        window_size=20
    )


    agent = DQNAgent(env)
    agent.restore()
    action = agent.env.action_space.sample()
    state, reward, done, info = agent.env.step(action)
    action = agent.get_action(state)
    action = agent.env.action_space.sample()
    step = 0
    while not done and (step < n_steps):
      state, reward, done, info = agent.env.step(action)
      action = agent.get_action(state)
      print('step:', step, '-- action:', action)
      step += 1

    env.portfolio.performance.plot(figsize=(16, 10))
    env.portfolio.performance.net_worth.plot(figsize=(16, 10))



if __name__ == "__main__":
    files = ["test.csv"]
    agent_path = "policy_network__4f69927e-7522-4712-9d8a-fe7a1568dbd3__029.hdf5"
    test = preprocess(files)

